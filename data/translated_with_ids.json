{
    "ELSL": [
        {
            "id": 1,
            "content": "## ELSL++ english like scripting language made to be converted to c++ easily with a simple translator program"
        },
        {
            "id": 2,
            "content": "// Container (Variables)"
        },
        {
            "id": 3,
            "content": "// Containers ar elike Storage Bins that are used to hold data of varying types as well as values and or information that can be referenced and manipulated later."
        },
        {
            "id": 4,
            "content": "// They can be declared using the 'var', 'let', or 'const' keywords."
        },
        {
            "id": 5,
            "content": "var myVar = \"Hello\"; // Declaring a variable with the 'var' keyword"
        },
        {
            "id": 6,
            "content": "let myLet = \"World\"; // Declaring a variable with the 'let' keyword = data (can be reassigned & updated)"
        },
        {
            "id": 7,
            "content": "const myConst = \"Hello World\"; // Declaring a variable with the 'const'= data (cannot be reassigned and thus is constand and unchangeable)"
        },
        {
            "id": 8,
            "content": "_____________________________________________________________________________________________"
        },
        {
            "id": 9,
            "content": "=============================================================================================="
        },
        {
            "id": 10,
            "content": "_________________________________________________________________________________"
        },
        {
            "id": 11,
            "content": "_________________________________________________________________________________"
        },
        {
            "id": 12,
            "content": "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""
        },
        {
            "id": 13,
            "content": "// (Data Types)"
        },
        {
            "id": 14,
            "content": "// There are several different data types in ELSL, including:"
        },
        {
            "id": 15,
            "content": "// - Texts: a sequence of characters enclosed in quotes (single or double)"
        },
        {
            "id": 16,
            "content": "// - Numbers: numeric values (integer or floating-point)"
        },
        {
            "id": 17,
            "content": "// - Branch: true or false values"
        },
        {
            "id": 18,
            "content": "// - Matrix: an ordered list of values enclosed in square brackets"
        },
        {
            "id": 19,
            "content": "// - Objects: a collection of key-value pairs enclosed in curly braces"
        },
        {
            "id": 20,
            "content": "// - EmptyValue: a value that represents nothing or no value"
        },
        {
            "id": 21,
            "content": "// - Undefined: a value that represents a variable that has not been assigned a value"
        },
        {
            "id": 22,
            "content": "// - Structures: like a big box with different sections for storing various types of things like additional data / values etc"
        },
        {
            "id": 23,
            "content": "const myText = \"Hello World\"; // Declaring a string variable"
        },
        {
            "id": 24,
            "content": "const myNumber = 42; // Declaring a number variable"
        },
        {
            "id": 25,
            "content": "const myBranch = true; // Declaring a branch variable"
        },
        {
            "id": 26,
            "content": "const myArray = [1, 2, 3]; // Declaring an array variable"
        },
        {
            "id": 27,
            "content": "const myObject = {name: \"John\", age: 30}; // Declaring an object variable"
        },
        {
            "id": 28,
            "content": "const myNull = null; // Declaring a null variable"
        },
        {
            "id": 29,
            "content": "let myUndefined; // Declaring an undefined variable"
        },
        {
            "id": 30,
            "content": "// 'struct MyStruct' Declaring a sIMPLE STRUCTURE AND STORING DATA IN IT."
        },
        {
            "id": 31,
            "content": "struct MyStruct {"
        },
        {
            "id": 32,
            "content": "string name; // A section for names (text)."
        },
        {
            "id": 33,
            "content": "int age;     // A section for age (number)."
        },
        {
            "id": 34,
            "content": "} myObject = {\"John\", 30};"
        },
        {
            "id": 35,
            "content": "__________________________________________________________________________________________________"
        },
        {
            "id": 36,
            "content": "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\""
        },
        {
            "id": 37,
            "content": "// Statements"
        },
        {
            "id": 38,
            "content": "_____________________________________________________________________________"
        },
        {
            "id": 39,
            "content": "// If Statement"
        },
        {
            "id": 40,
            "content": "// The if statement is used to execute a block of code if a condition is true."
        },
        {
            "id": 41,
            "content": "if (mybranch === true) {"
        },
        {
            "id": 42,
            "content": "DisplayTextOnScreen(\"The branch is true.\");"
        },
        {
            "id": 43,
            "content": "}"
        },
        {
            "id": 44,
            "content": "_______________________________________"
        },
        {
            "id": 45,
            "content": "____________________________________________________________"
        },
        {
            "id": 46,
            "content": "// If-Else Statement"
        },
        {
            "id": 47,
            "content": "// The if-else statement is used to execute one block of code if a condition is true, and another block of code if the condition is false."
        },
        {
            "id": 48,
            "content": "if (mybranch === true) {"
        },
        {
            "id": 49,
            "content": "DisplayTextOnScreen(\"The branch is true.\");"
        },
        {
            "id": 50,
            "content": "} else {"
        },
        {
            "id": 51,
            "content": "DisplayTextOnScreen(\"The branch is false.\");"
        },
        {
            "id": 52,
            "content": "}"
        },
        {
            "id": 53,
            "content": "______________________________________________________"
        },
        {
            "id": 54,
            "content": "_______________________________________________________________________________________________"
        },
        {
            "id": 55,
            "content": "// Else Statement"
        },
        {
            "id": 56,
            "content": "// The else statement is used to execute a block of code if the condition in the if statement is false."
        },
        {
            "id": 57,
            "content": "if (mybranch === false) {"
        },
        {
            "id": 58,
            "content": "DisplayTextOnScreen(\"The branch is false.\");"
        },
        {
            "id": 59,
            "content": "} else {"
        },
        {
            "id": 60,
            "content": "DisplayTextOnScreen(\"The branch is not false.\");"
        },
        {
            "id": 61,
            "content": "}"
        },
        {
            "id": 62,
            "content": "________________________________________________________________"
        },
        {
            "id": 63,
            "content": "_______________________________________________________________________________"
        },
        {
            "id": 64,
            "content": "// Nested If-Else Statement"
        },
        {
            "id": 65,
            "content": "// You can also nest if-else statements to create more complex conditions."
        },
        {
            "id": 66,
            "content": "if (myCondition === true ++ myNumber === 42) then {DisplayText(\"The condition is met as true and the number is 42.\")"
        },
        {
            "id": 67,
            "content": "}Then myFunction"
        },
        {
            "id": 68,
            "content": "} otherwise if myCondition === false {"
        },
        {
            "id": 69,
            "content": "DisplayTextOnScreen(\"Conditions Not Met Yet , the number is 42 though the The Condition is False.\");"
        },
        {
            "id": 70,
            "content": "}"
        },
        {
            "id": 71,
            "content": "} orelse {"
        },
        {
            "id": 72,
            "content": "DisplayTextOnScreen(\"The Condition is false and the number isnt equall to 42.\");"
        },
        {
            "id": 73,
            "content": "}"
        },
        {
            "id": 74,
            "content": "_______________________________________________________________________________"
        },
        {
            "id": 75,
            "content": "+ is the addition operator. It is used to add two numbers together or concatenate two strings."
        },
        {
            "id": 76,
            "content": "- is the subtraction operator. It is used to subtract one number from another."
        },
        {
            "id": 77,
            "content": "* is the multiplication operator. It is used to multiply two numbers together."
        },
        {
            "id": 78,
            "content": "/ is the division operator. It is used to divide one number by another."
        },
        {
            "id": 79,
            "content": "% is the modulus operator. It is used to find the remainder of dividing one number by another."
        },
        {
            "id": 80,
            "content": "= is the assignment operator. It is used to assign a value to a variable."
        },
        {
            "id": 81,
            "content": "== is the equality operator. It is used to compare two values for equality, with type coercion."
        },
        {
            "id": 82,
            "content": "=== is the strict equality operator. It is used to compare two values for equality, without type coercion."
        },
        {
            "id": 83,
            "content": "!= is the inequality operator. It is used to compare two values for inequality, with type coercion."
        },
        {
            "id": 84,
            "content": "!== is the strict inequality operator. It is used to compare two values for inequality, without type coercion."
        },
        {
            "id": 85,
            "content": "> is the greater than operator. It is used to compare two values to see if the left operand is greater than the right operand."
        },
        {
            "id": 86,
            "content": "< is the less than operator. It is used to compare two values to see if the left operand is less than the right operand."
        },
        {
            "id": 87,
            "content": ">= is the greater than or equal to operator. It is used to compare two values to see if the left operand is greater than or equal to the right operand."
        },
        {
            "id": 88,
            "content": "<= is the less than or equal to operator. It is used to compare two values to see if the left operand is less than or equal to the right operand."
        },
        {
            "id": 89,
            "content": "&& is the logical AND operator. It is used to combine two or more conditions and returns true if both conditions are true."
        },
        {
            "id": 90,
            "content": "|OR| is the logical OR operator. It is used to combine two or more conditions and returns true if at least one of the conditions is true."
        },
        {
            "id": 91,
            "content": "|IsFalse| is the logical NOT operator. It is used to negate a condition and returns true if the condition is false."
        },
        {
            "id": 92,
            "content": "basic common syntax  or statements usable referances and commands built-in"
        },
        {
            "id": 93,
            "content": "Get,Set,Combine"
        },
        {
            "id": 94,
            "content": "Character,Player"
        },
        {
            "id": 95,
            "content": "Controller,Keyboard,Button,DirectInput,Key"
        },
        {
            "id": 96,
            "content": "OnPressed,OnReleased,OnCollide,OnHit,OnEvent,WhileHeld,OnClicked,OnDown,OnUp"
        },
        {
            "id": 97,
            "content": "BeginPlay ,UponStartup , AfterFunction , Before , While , OnlyIf ,"
        },
        {
            "id": 98,
            "content": "then"
        }
    ],
    "C++": [
        {
            "id": 99,
            "content": "#include <iostream>"
        },
        {
            "id": 100,
            "content": "#include <string>"
        },
        {
            "id": 101,
            "content": "using namespace std;"
        },
        {
            "id": 102,
            "content": "// Variables"
        },
        {
            "id": 103,
            "content": "// Variables are like labeled jars where you store different things."
        },
        {
            "id": 104,
            "content": "// 'string myString' is a jar with a label 'myString' holding the text \"Hello\"."
        },
        {
            "id": 105,
            "content": "string myString = \"Hello\";"
        },
        {
            "id": 106,
            "content": "// 'int myInt' is a jar labeled 'myInt' holding the number 42."
        },
        {
            "id": 107,
            "content": "int myInt = 42;"
        },
        {
            "id": 108,
            "content": "// 'bool myBool' is a jar labeled 'myBool' and it can only hold true or false. Now it holds true."
        },
        {
            "id": 109,
            "content": "bool myBool = true;"
        },
        {
            "id": 110,
            "content": "// 'const string myConst' is a special jar labeled 'myConst'. Once you put \"Hello World\" in it, you can't change it."
        },
        {
            "id": 111,
            "content": "const string myConst = \"Hello World\";"
        },
        {
            "id": 112,
            "content": "//=============================================================================================="
        },
        {
            "id": 113,
            "content": "// Data Types"
        },
        {
            "id": 114,
            "content": "// Data types tell you what kind of stuff you can put in your jars (variables)."
        },
        {
            "id": 115,
            "content": "// 'string' is for storing text, like words or sentences."
        },
        {
            "id": 116,
            "content": "string myString2 = \"Hello World\";"
        },
        {
            "id": 117,
            "content": "// 'int' is for storing whole numbers, no fractional parts."
        },
        {
            "id": 118,
            "content": "int myNumber = 42;"
        },
        {
            "id": 119,
            "content": "// 'float' is for storing numbers that have parts, like 3.14."
        },
        {
            "id": 120,
            "content": "float myFloat = 3.14;"
        },
        {
            "id": 121,
            "content": "// 'bool' is for storing just two things: true or false."
        },
        {
            "id": 122,
            "content": "bool mybranch = true;"
        },
        {
            "id": 123,
            "content": "// 'int[3]' is like having a row of 3 small jars, each can hold an integer."
        },
        {
            "id": 124,
            "content": "int myArray[3] = {1, 2, 3};"
        },
        {
            "id": 125,
            "content": "// 'struct MyStruct' is like a big box with different sections for storing various types of things."
        },
        {
            "id": 126,
            "content": "struct MyStruct {"
        },
        {
            "id": 127,
            "content": "string name; // A section for names (text)."
        },
        {
            "id": 128,
            "content": "int age;     // A section for age (number)."
        },
        {
            "id": 129,
            "content": "} myObject = {\"John\", 30};"
        },
        {
            "id": 130,
            "content": "//=============================================================================================="
        },
        {
            "id": 131,
            "content": "// Control Structures"
        },
        {
            "id": 132,
            "content": "// These are like rules for making decisions and doing different things based on those decisions."
        },
        {
            "id": 133,
            "content": "// 'if' statement checks if something is true, then does something."
        },
        {
            "id": 134,
            "content": "if (myBranch) {"
        },
        {
            "id": 135,
            "content": "cout << \"The branch is true.\" << endl;"
        },
        {
            "id": 136,
            "content": "}"
        },
        {
            "id": 137,
            "content": "// 'if-else' statement checks if something is true, does one thing, otherwise does another thing."
        },
        {
            "id": 138,
            "content": "if (myBranch) {"
        },
        {
            "id": 139,
            "content": "cout << \"The branch is true.\" << endl;"
        },
        {
            "id": 140,
            "content": "} else {"
        },
        {
            "id": 141,
            "content": "cout << \"The branch is false.\" << endl;"
        },
        {
            "id": 142,
            "content": "}"
        },
        {
            "id": 143,
            "content": "// 'Nested if-else' is like an 'if-else' inside another 'if-else'. It's used for more detailed decision making like a sort of conditional decision."
        },
        {
            "id": 144,
            "content": "if (myBranch) {"
        },
        {
            "id": 145,
            "content": "if (myNumber == 42) {"
        },
        {
            "id": 146,
            "content": "cout << \"The branch is true and the number is 42.\" << endl;"
        },
        {
            "id": 147,
            "content": "} else {"
        },
        {
            "id": 148,
            "content": "cout << \"The branch is true but the number is not 42.\" << endl;"
        },
        {
            "id": 149,
            "content": "}"
        },
        {
            "id": 150,
            "content": "} else {"
        },
        {
            "id": 151,
            "content": "cout << \"The branch is false.\" << endl;"
        },
        {
            "id": 152,
            "content": "}"
        },
        {
            "id": 153,
            "content": "//=============================================================================================="
        },
        {
            "id": 154,
            "content": "// Operators"
        },
        {
            "id": 155,
            "content": "// Operators are special symbols that tell the computer to do math or compare things."
        },
        {
            "id": 156,
            "content": "// '+' adds two numbers together or joins texts."
        },
        {
            "id": 157,
            "content": "// Example: 5 + 3 = 8 or \"Hello\" + \"World\" = \"HelloWorld\"."
        },
        {
            "id": 158,
            "content": "// '-' subtracts one number from another."
        },
        {
            "id": 159,
            "content": "// Example: 5 - 3 = 2."
        },
        {
            "id": 160,
            "content": "// '*' multiplies two numbers."
        },
        {
            "id": 161,
            "content": "// Example: 5 * 3 = 15."
        },
        {
            "id": 162,
            "content": "// '/' divides one number by another."
        },
        {
            "id": 163,
            "content": "// Example: 6 / 2 = 3."
        },
        {
            "id": 164,
            "content": "// '%' finds the remainder after division."
        },
        {
            "id": 165,
            "content": "// Example: 5 % 2 = 1 (because 5 divided by 2 leaves a remainder of 1)."
        },
        {
            "id": 166,
            "content": "// '=' puts the value on the right into the variable on the left."
        },
        {
            "id": 167,
            "content": "// Example: int a = 5; (Now 'a' holds the value 5)."
        },
        {
            "id": 168,
            "content": "// '==' checks if two values are equal."
        },
        {
            "id": 169,
            "content": "// Example: 5 == 5 (This is true)."
        },
        {
            "id": 170,
            "content": "// '!=' checks if two values are not equal."
        },
        {
            "id": 171,
            "content": "// Example: 5 != 3 (This is true)."
        },
        {
            "id": 172,
            "content": "// '>' checks if the value on the left is greater than the one on the right."
        },
        {
            "id": 173,
            "content": "// Example: 5 > 3 (This is true)."
        },
        {
            "id": 174,
            "content": "// '<' checks if the value on the left is less than the one on the right."
        },
        {
            "id": 175,
            "content": "// Example: 3 < 5 (This is true)."
        },
        {
            "id": 176,
            "content": "// '>=' checks if the left value is greater than or equal to the right one."
        },
        {
            "id": 177,
            "content": "// Example: 5 >= 5 (This is true)."
        },
        {
            "id": 178,
            "content": "// '<=' checks if the left value is less than or equal to the right one."
        },
        {
            "id": 179,
            "content": "// Example: 3 <= 5 (This is true)."
        },
        {
            "id": 180,
            "content": "// '&&' is true if both conditions are true."
        },
        {
            "id": 181,
            "content": "// Example: (5 > 3) && (5 < 10) (This is true)."
        },
        {
            "id": 182,
            "content": "// '||' is true if at least one of the conditions is true."
        },
        {
            "id": 183,
            "content": "// Example: (5 < 3) || (5 < 10) (This is true)."
        },
        {
            "id": 184,
            "content": "// '!' inverts the truth value."
        },
        {
            "id": 185,
            "content": "// Example: !(5 < 3) (This is true because 5 is not less than 3)."
        }
    ]
}